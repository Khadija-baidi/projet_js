Khadija baidi
khadijabaidi
In voice
•
👻

Image
Image
Image
Image
Image
Forkani Mehdi
OP
 — 4/7/2025 3:21 PM
let numbers = [2, 4, 6, 8];


Given an array of numbers, use a forEach loop to create a new array containing the square of each number.
Forkani Mehdi
OP
 — 4/7/2025 3:35 PM
correction
let numbers = [2, 4, 6, 8];
let squareArray = []

numbers.forEach(number => {
 squareArray.push(number ** 2)
});

console.log(squareArray);
Forkani Mehdi
OP
 — 4/7/2025 3:50 PM
ask the user  to give  u a number
Write a program that calculates the factorial of a given number using a while loop.
`
// Exercise 1 - WHILE Loops

// Create a variable class with an array.
// Using a prompt, choose the maximum number of students in the class.
// Using a while loop, insert students into the class until it is full.
// After filling the class, display all students.

// 2

// Create an array of 9 first names.
// Use a loop to greet each name with "Hello" until 9 is reached, and display them in the console.
// Hint: let i = 0;
// Hint 2: (i < 9)

// 3

// Create an array of 6 fruits.
// Using a while loop, empty the array.
// Use fruits.length as the condition.*

// 4

// Create an array of 4 vegetables named 'vegetableBasket'.
// Store the length of the array in a variable named 'length'.
// Empty the 'vegetableBasket' array and move its content to a second array named 'vegetableBox'.

// 5

// Prepare a riddle and create a while loop that checks if the user answers correctly using a prompt. Continue asking until the user answers correctly. If correct, show an alert congratulating them.

// 6

// Redo Exercise 4 using a DO WHILE loop.

// 7

// Create a variable with the current year.
// Create a program that generates a random year between 1970 and 2018. The user must determine their age by answering the question: "If I was born in 1988 (randomly generated year), how old am I today?" The user has three attempts. If they give the correct answer, exit the loop. If they fail three times, exit the loop. Finish with a display.

// 8

// Ask the user to fill a fruit basket until they have 8 fruits.
// Once the basket is filled, show it to the user.
// Then, ask if they want to remove a fruit. If the user enters the name of a fruit, remove it, show the updated basket, and ask the question again. If they enter something other than the name of a fruit, tell them "Thank you, enjoy your meal."
// Each fruit entered by the user should be spelled with an initial capital letter and the rest in lowercase.
// Show the user's basket with the first letter in uppercase.
Forkani Mehdi
OP
 — 4/8/2025 12:39 PM
```js
//* exo 1
let classe = []
// let maxStudentPlaces = parseInt(prompt("how many student can join ur classssssssss"))

// while (classe.length < maxStudentPlaces) {
Expand
message.txt
3 KB
Forkani Mehdi
OP
 — 4/8/2025 2:39 PM
advanced
// # JavaScript Loops and Conditions Exercises

//* ## 1. **Sum of Numbers in an Array (Beginner)**

// Create an array of 10 numbers. Use a `for` loop to find the sum of all the numbers in the array and return the result.
Expand
message.txt
5 KB
Forkani Mehdi
OP
 — 4/10/2025 10:51 AM
// # JavaScript Loops and Conditions Exercises

//* ## 1. **Sum of Numbers in an Array (Beginner)**

// Create an array of 10 numbers. Use a `for` loop to find the sum of all the numbers in the array and return the result.
Expand
app.js
10 KB
Forkani Mehdi
OP
 — 4/10/2025 2:43 PM
functions 
/ Exercise 1:
 Greetings
// Create a function called greet that takes a name parameter and prints a greeting message to the console. Call the function with different names.
`
// Exercise 2: Sum of Numbers
// Create a function called sumNumbers that takes an array of numbers as a parameter and returns the sum of those numbers. Call the function with different arrays.
// Exercise 4: Even or Odd
// Create a function called isEven that takes a number as a parameter and prints whether the number is even or odd to the console. Use an if-else statement. Call the function with different numbers.
`
// Exercise 6: Palindrome Check
// Create a function called isPalindrome that takes a string as a parameter and prints whether the string is a palindrome (reads the same backward as forward) to the console. Ignore spaces and case. Use loops and conditional statements. Call the function with different strings.
`
// Exercise 7: Maximum of Two Numbers
// Create a function called maxOfTwo that takes two numbers as parameters and prints the larger of the two to the console. Use an if-else statement. Call the function with different numbers.

// Exercise 8: Array Sum
// Create a function called arraySum that takes an array of numbers as a parameter and prints the sum of those numbers to the console. Use the for...of loop. Call the function with different arrays.

// Exercise 9: Factorial Without Recursion
// Create a function called factorial that takes a number as a parameter and prints the factorial of that number to the console. Calculate the factorial without using recursion. Call the function with different numbers.

// Exercise 10: Vowel Checker
// Create a function called isVowel that takes a character as a parameter and prints whether the character is a vowel or not to the console. Use an if-else statement. Call the function with different characters.

// Exercise 11: Largest in Array
// Create a function called largestInArray that takes an array of numbers as a parameter and prints the largest number in the array to the console. Use the Math.max function. Call the function with different arrays.

// Exercise 12: Prime Number Checker
// Create a function called isPrime that takes a number as a parameter and prints whether the number is a prime number or not to the console. Use loops and conditional statements. Call the function with different numbers.

// Exercise 13: Sum of Digits
// Create a function called sumOfDigits that takes a positive integer as a parameter and calculates the sum of its digits. Print the result to the console.

// Create a function called arrayIntersection that takes two arrays as parameters and returns a new array containing the common elements between them.
Forkani Mehdi
OP
 — 4/11/2025 10:30 AM
correction 
**correction**

```js
//* v1

const greeting = (name) => {
Expand
message.txt
3 KB
Forkani Mehdi
OP
 — 4/11/2025 10:58 AM
fibbonaci  seq 

const fibbonaci = (number) => {

  let seq = [0, 1]

  for (let i = 1; i < number; i++) {

    seq.push(seq[i] + seq[i - 1])

  }
  console.log(seq);

}


const fibseq = (n) => {
  let a = 0
  let b = 1

  for (let index = 0; index <= n; index++) {
    console.log(a);
    
    let nextResult = a + b
    a = b
    b = nextResult
    
  }

}


fibseq(8)
Forkani Mehdi
OP
 — 4/11/2025 1:00 PM
EXO1
Traduire le code suivant en class et en instances
lieux
let maison = {
nom: "maison",
contenu: [],
};
let epicerie = {
nom: "epicerie",
contenu: [],
ingredients: [],
};
let cuisine = {
nom: "cuisine",
contenu: [],
ingredients: [],
};
ingredients
let poivron = {
nom: 'poivron',
etat: 'entier',
prix:  1 ,
};
let oignon = {
nom: 'oignon',
etat: 'entier',
prix:  2 ,
};
let oeuf = {
nom: 'oeuf',
etat: 'entier',
prix:  4 ,
};
let epice = {
nom: 'epice',
etat: 'moulu',
prix:  3.25 ,
};
let paprika = {
nom: 'paprika',
etat: 'moulu',
prix:  1.5 ,
};
let fromage = {
nom: 'fromage',
etat: 'coupé',
prix:  1.6 ,
};
Personne
let personnage = {
nom: "Maxime",
lieu: "néant",
argent: 100,
panier: [],
se_deplacer(x){
},
payer(x){
},
couper(x,y){
}
}
Forkani Mehdi
OP
 — 4/11/2025 3:12 PM
correction

class Lieux {
  constructor(name, content) {
    this.name = name
    this.content = content
  }
}

class Place extends Lieux {
  constructor(name, content, ingredients) {
    super(name, content);
    this.ingredients = ingredients

  }
}


let maison = new Lieux("maison", [])
let epi = new Place("epi", [], [])
let cuisine = new Place("cuisine", [], [])


class Ingredients {
  constructor(name, state, price) {
    this.name = name
    this.state = state
    this.price = price
  }
}


let poivron = new Ingredients("poivron", "entier", 12)
let oignon = new Ingredients("oignon", "entier", 2)
let egg = new Ingredients("egg", "entier", 10)
let epice = new Ingredients("epice", "moulu", 1)
let paprika = new Ingredients("paprika", "moulu", 12)
let fromage = new Ingredients("fromage", "coupe", 1)


class Person {
  constructor(name, place, bag, money) {
    this.name = name
    this.place = place
    this.bag = bag
    this.money = money

  }


  move(x) {
    let prev =  this.place
    this.place = x
    console.log(`${this.name}  moved from ${prev}  to  ${x}`);

  }
}


let person = new Person("boujem3a", "chiblasa", [], 99999999999)


person.move(cuisine.name)
person.move(maison.name)

console.log(person);
 exo 2  hak o  ara 

# Exercise 2 – Object-Oriented Programming in JavaScript

## Instructions

### 🧱 Step 1: Create a Class `ObjectItem`
- Properties:
  - `name` (string)
  - `price` (number)

---

### 🎒 Step 2: Create Two Instances of `ObjectItem`
- Example: a sword and a potion
- Give each a different name and price

---

### 📦 Step 3: Create a Box (Array)
- Add the two objects to the box

---

### 🧍 Step 4: Create a Class `Character`
- Properties:
  - `name` (string)
  - `bag` (array)
  - `money` (number)
- Methods:
  - `take(object)` → takes an object from the box and puts it in the character's bag
  - `buy(seller, object)` → buys an object from another character if they have enough money

---

### 👫 Step 5: Create Two Characters
- Make each character take one object from the box using `take()`

---

### 💸 Step 6: Perform a Transaction
- One character buys the object from the other using `buy()`

---

### 🎯 Bonus
- Log the final status of each character:
  - What items are in their bag?
  - How much money do they have?
 
Forkani Mehdi
OP
 — 4/12/2025 3:07 PM
BUS
Create a class [Place] with a property name (string) and people (empty array).

Then create instances of [Place]: LionsGeek, Snack, and Home.

Next, create a class [Person] with properties name (string), first name (string), money (number), and a method move(). The move() method should allow the person to move to different places by calling the board() method of the bus.

After that, create an instance of your character.

Create a class [Bus] with properties people (empty array), money (number), and a method board() (which will be called in the move() method of the person). The board() method should check if the person has enough money. If yes, deduct the fare from their money, add it to the bus's money, and let the person board the bus. The bus fare is $2.80.

Create an instance of the Bus.

Timeline:

8:00 AM - You are at Home.
8:30 AM - Take the bus to LionsGeek.
8:45 AM - You are at LionsGeek.
12:45 PM - Leave LionsGeek, take the bus to the Snack.
1:30 PM - Leave the Snack, walk back to LionsGeek to digest.
5:10 PM - Leave LionsGeek, take the bus back home.
Finally, use console.log() to display your money and the bus's money.
@here
@coding 4
Forkani Mehdi
OP
 — 4/13/2025 9:28 AM
correction  hak o ara  

class Items {
  constructor(name, price) {
    this.name = name
    this.price = price
  }
}

let book = new Items("book", 25)
let pen = new Items("pen", 13)

let box = [book, pen]


class Character {
  constructor(name, bag, money) {
    this.name = name
    this.bag = bag
    this.money = money
  }

  take(item) {
    let existingItem = box.findIndex(e => e.name == item)
    console.log(existingItem != -1 ? "item exist" : "item makaynch");

    if (existingItem != -1) {
      this.bag.unshift(box[existingItem])
      console.log(`${this.name} took ${box[existingItem].name} `);
      box.splice(existingItem, 1)
      console.log(this.bag[0].name + " has  been removed  from the box array");
      console.table(box)
      console.log(this.name + " have " + this.bag.map(e => e.name).join(" , "));

    }

  }




  buy(seller, item) {

    let existingItem = seller.bag.findIndex(e => e.name == item)

    if (existingItem != -1) {
      let itemPrice = seller.bag[existingItem].price
      if (this.money >= itemPrice) {
        
        seller.money += itemPrice

        console.log(seller.name + " li ghadi ibi3  wla  3ando " + seller.money);

        this.money -= itemPrice
        
        console.log(this.name + " li ghadi ichri  wla  3ando " + this.money);
        
        this.bag.unshift(seller.bag[existingItem])
        
        console.log(this.name + " wella 3ando " + item);
        
        seller.bag.splice(existingItem, 1)
        
        console.log(seller.name + " mabp9ach 3ando " + item);
      }else{
        
        console.log(this.name +  " ma3ndoch flos kafin");
        
      }
    }else{
      console.log(seller.name +  " ma3andoch chi " + item);
      
    }

  }
}


let boucj3ayb = new Character("bouch3ayb", [], 20)
let dawya = new Character("dawya", [], 15)



boucj3ayb.take("pen")
dawya.take('book')


dawya.buy(boucj3ayb , "pen")
Forkani Mehdi
OP
 — 4/14/2025 9:54 AM
OMLETTE
# Omlette

```js
/** Create a person object. This person should have properties and methods:
 * - name (string)
 * - location (string)
Expand
message.txt
4 KB
Forkani Mehdi
OP
 — Yesterday at 10:39 AM
correction bus 
//* Create a class [Place] with a property name (string) and people (empty array).

//* Then create instances of [Place]: LionsGeek, Snack, and Home.

//^ Next, create a class [Person] with properties name (string), first name (string), money (number), and a method move(). The move() method should allow the person to move to different places by calling the board() method of the bus.
Expand
bus.js
4 KB
correction omlette
//  simple  objects


let tool = {
    name: "knife",
    action: "cut"
Expand
omlette.js
6 KB
<CODEPITAL/>
```
# Welcome to Codepital:

In this exercise, we have patients who will go to a doctor to get debugged. The doctor will diagnose them and prescribe a remedy. After that, the patients will go to the pharmacy to buy their remedy, take it, and be cured.

## Description of patients:
Expand
message.txt
4 KB
Forkani Mehdi
OP
 — 9:50 AM
console final project
### First Project JavaScript:

## 1 - Instructions:
- Create a folder named: first_project_js_firstName_lastName
- Create a repository with the same name as the folder
- Adhere to the folder structure
Expand
fjs.txt
5 KB
﻿
### First Project JavaScript:

## 1 - Instructions:
- Create a folder named: first_project_js_firstName_lastName
- Create a repository with the same name as the folder
- Adhere to the folder structure
- Individual work
- Minimum of 10 commits
- Deadline: One day
- Use of object classes, arrays, functions, prompts, etc.

## 2 - Project Objective:
- Create a JavaScript program that simulates logging into a bank account using only the console to interact with the user.

## 3 - Instructions:
- Account Creation and Management:
    + Allow the user, via prompts, to choose between signing up, logging in, or changing the password.
    + If the user only writes "exit," they exit the current process, and the choice question is asked again.
        * If the user chooses to sign up, here are the details they must enter:
            # Name (Full):
            - Check for leading or trailing spaces.
            - The first letter should be capitalized.
            - After each space, the first letter should remain capitalized.
            - Check that all other characters are in lowercase.
            - Do not save the Name if it has less than 5 characters (excluding spaces).
            - Do not save the Name if it contains numbers, "@", or similar special characters.

            # Email:
            - Check for leading or trailing spaces.
            - Convert all letters to lowercase.
            - Do not save the Email if it has spaces in the middle.
            - Do not save the Email if it has fewer than 10 characters (excluding spaces).
            - Do not save the Email if it does not contain exactly one "@" symbol.
            - Ensure the email is unique.

            # Age:
            - Check for leading, trailing, or middle spaces.
            - Verify that only digits are entered.
            - Do not save the Age if it has 0 characters, or if it has 3 characters or more.

            # Password:
            - Check for leading or trailing spaces.
            - Do not save the Password if it has spaces in the middle.
            - Require at least one special character from the set: ["@", "#", "-", "+", "*", "/"].
            - Require at least 7 characters to confirm the password.

            # Password_confirmed:
            - The user must re-enter their exact password; otherwise, they are blocked.

        * If the user chooses to log in, here are the details they must enter:
            # Email:
            - Check if the email exists in our Database.
            
            # Password:
            - Check if the entered password is associated with the previously entered email.

        * If the user chooses to change the password:
            - They must enter their existing Email in the Database.

        * After the user logs in, display the amount they have in their bank (user's choice) and offer them services:
            # Logout:
            - If the user chooses this option, they are logged out and offered the option, as at the beginning, to sign up, log in, or change the password.
            
            # Withdraw Money:
            - If the user chooses this option, they can withdraw an amount from their bank (not exceeding the available amount).
            
            # Deposit Money:
            - If the user chooses this option, they can deposit the desired amount (not exceeding 1000 dirhams).
            
            # Take a Loan:
            - If the user chooses this option, they can take a loan up to 20% of what they already have.
            - They receive an additional 20%, but lose 10% with each login until reaching the amount of their loan.
            
            # Invest:
            - If the user chooses this option, they can invest any amount in the bank.
            - Upon the next login, they will receive 20% of their investment each time until reaching 120% (earning 20% on each investment).
            
            # History:
            - Ability to view the entire transaction history.